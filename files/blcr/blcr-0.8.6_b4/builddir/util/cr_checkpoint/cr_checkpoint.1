.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.29.
.TH CR_CHECKPOINT "1" "November 2017" "Berkeley Lab Checkpoint/Restart" "User Commands"
.SH NAME
cr_checkpoint \- checkpoints a process, process group, or session.
.SH SYNOPSIS
.B cr_checkpoint
[\fIoptions\fR] \fIID\fR
.SH DESCRIPTION

Invoking cr_checkpoint causes a process (with or without all of its descendants),
all processes within a process group, or all processes within a session,
to be checkpointed.  The result is a checkpoint file (or a directory
with one checkpoint file per process) that contains all the state needed to
restart the process(es) at a later time.  Checkpointed processes can be
restarted via 
.BR cr_restart (1).

To be checkpointed by cr_checkpoint, a process must have the 
.I libcr.so 
library (or one of its relatives)
loaded.  This can be achieved by starting the program with 
.BR cr_run (1),
or by linking your application with 
.BR -lcr .
Or, the library may be loaded by other libraries you have linked
with (such as a checkpoint-ready MPI library), or your system's parallel job
startup script, etc.  Check your system documentation for details.

.SS "File creation/replacement"
By default (or if 
.B --atomic 
is passed) cr_checkpoint creates the new 
context file/directory atomically:  either the checkpoint fails (and any
existing context file/directory is unchanged), or it appears in the
directory ready to be used by 
.BR cr_restart .
If an existing checkpoint with the same file name exists, it will either be
be unmodified (if the new checkpoint fails for any reason), or replaced
atomically (via
.BR rename (2).
If 
\fB\-\-backup\fR[=\fINAME\fR]
is passed, any existing checkpoint will be backed up instead, either
to 
.I NAME 
or with a numbered extension 
.RI ( \.~1~ , 
.IR \.~2~ , 
etc., with more recent
checkpoints having higher numbers).  If 
.B --clobber 
is passed, the checkpoint will immediately remove any existing checkpoint files,
and will write the checkpoint directly out into the target file/directory: this
option uses less disk space if an existing checkpoint is present, since the old
checkpoint is immediately discarded, but if the checkpoint fails, the
pre-existing checkpoint is lost.  Finally, if
.B --noclobber
is passed, then the checkpoint will fail if the target file/directory exists.

.SS "File sync"
By default (or when 
.B --sync 
is passed), cr_checkpoint waits until the checkpoint is complete in memory, and
additionally calls 
.BR fsync (2) 
on all files and directories involved in the checkpoint (including back-up
files) to disk before exiting.  Passing 
.B --nosync 
causes these fsync calls to be skipped.

.SS "Timeout"
A maximum timeout in seconds can be set for a checkpoint via the 
.B --time 
flag: if the checkpoint takes longer than this, cr_checkpoint will print an
error mesage and exit with an error.  If a timeout occurs, the state of the
process or processes that were being checkpointed is undefined.

.SS "Signals"
By default checkpointed processes continue to run after a checkpoint is
complete.  Alternatively, you may specify that they be stopped (via 
.BR --stop ),
or terminated/aborted/killed (via 
.BR --term , 
.BR --abort ,
or 
.BR --kill ).
This is done by sending the appropriate signal to every process that is part of
the checkpoint.
If the processes were stopped at the time the checkpoint was requested, then
.B --cont
may be used to send SIGCONT to all processes after the checkpoint is completed.

.SS "Memory mapped files"
By default, checkpoints do not include any files that are mmap()ed into the
process address space unless they are already unlinked at the time the checkpoint
is taken.  This is a space/time saving optimization under the assumption that the
files required will still be present (and uncorrupted) at restart time.  Typically
the largest savings comes from not saving the executable file or dynamic (a.k.a
shared) libraries.  However, options exist to cause the checkpoint to save these
files as well.  The flag
.B --save-exe
will cause the executable file to be included in the context file.  The flag
.B --save-private
will include in the context file any files that are mapped with the MAP_PRIVATE
flag, which under Linux includes the executable and dynamic/shared libaries.  The flag
.B --save-shared
is for saving files that are mapped with the MAP_SHARED flag.  Note that this is
.I not
the flag you want for shared libraries.
At restart any file saved by these flags will be mapped into the process
regardless of whether any file exists at the original location.
If there is file at the original location it remains untouched by the restart.
Finally
.B --save-all
and
.B --save-none
will cause all (or none) of these optional mmaped files to be saved.  The default
is 
.BR --save-none .
When passing multiple of these options they are processed from left to right with
all options being additive, except for
.B --save-none
which cancels the effects of any these options appearing earlier.

.SS "Checkpointing ptrace()ed processes"
There is (currently) no way to fully transparently deal with checkpoints of
processes that are being traced with
.BR ptrace (2).
Therefore, the default behavior (also available via
.BR --ptraced-error )
is to return an error if any of the processes to be checkpointed are
currently being ptraced.  However, there are two other possible behaviors
to choose among:

.TP
.B --ptraced-skip
Ptraced processes will be siliently excluded from the checkpoint.  No
error is generated unless this results in zero processes checkpointed.

.TP
.B --ptraced-allow
Ptraced processes will be checkpointed just like any other processes.
.IR WARNING :
Because the checkpointed process and the BLCR kernel module must interact
using signals and system calls, the debugger (or other tracer) may need
to `continue' the target process(es), possibly more than once, to allow
the checkpoint to complete.

.SS "Checkpointing ptrace()ing processes"
There is (currently) no way to fully transparently deal with checkpoints of
processes that are tracing other processes using
.BR ptrace (2).
Therefore, the default behavior (also available via
.BR --ptracer-error )
is to return an error if any of the processes to be checkpointed are
currently ptracing other processes.  However
.B --ptracer-skip
is available to cause cr_checkpoint to silently exclude such processes
from the checkpoint.  No error is generated in that case unless this would result
in zero processes checkpointed.
.SH OPTIONS
.SS "General options:"
.TP
\fB\-v\fR, \fB\-\-verbose\fR
print progress messages to stderr.
.TP
\fB\-q\fR, \fB\-\-quiet\fR
suppress error/warning messages to stderr.
.TP
-?, \fB\-\-help\fR
print this message and exit.
.TP
\fB\-\-version\fR
print version information and exit.
.SS "Options for scope of the checkpoint:"
.TP
\fB\-T\fR, \fB\-\-tree\fR
ID identifies a process id.  It and all
of its descendants are to be checkpointed.
This is the default.
.TP
\fB\-p\fR, \fB\-\-pid\fR, \fB\-\-process\fR
ID identifies a single process id.
.TP
\fB\-g\fR, \fB\-\-pgid\fR, \fB\-\-group\fR
ID identifies a process group id.
.TP
\fB\-s\fR, \fB\-\-sid\fR, \fB\-\-session\fR
ID identifies a session id.
.SS "Options for destination location of the checkpoint:"
.TP
\fB\-c\fR, \fB\-\-cwd\fR
checkpoint saved as a single 'context.ID' file in
cr_checkpoint's working directory (default).
.TP
\fB\-d\fR, \fB\-\-dir\fR DIR
checkpoint saved in new directory DIR, with one
\&'context.ID' file per process (unimplemented).
.TP
\fB\-f\fR, \fB\-\-file\fR FILE
checkpoint saved as FILE.
.TP
\fB\-F\fR, \fB\-\-fd\fR FD
checkpoint written to an open file descriptor.
.SS "Options for creation/replacement policy for checkpoint files:"
.TP
\fB\-\-atomic\fR
checkpoint created/replaced atomically (default).
.TP
\fB\-\-backup\fR[=\fINAME\fR]
checkpoint created atomically, and any existing
checkpoint backed up to NAME or *.~1~, *.~2~, etc.
.TP
\fB\-\-clobber\fR
checkpoint written incrementally to target,
overwriting any pre-existing checkpoint.
.TP
\fB\-\-noclobber\fR
checkpoint will fail if the target file exists.
.IP
These options are ignored if the destination is a file descriptor.
.SS "Options for signal sent to process(es) after checkpoint:"
.TP
\fB\-\-run\fR
no signal sent: continue execution (default).
.TP
\fB\-S\fR, \fB\-\-signal\fR NUM
signal NUM sent to all processess.
.TP
\fB\-\-stop\fR
SIGSTOP sent to all processes.
.TP
\fB\-\-term\fR
SIGTERM sent to all processes.
.TP
\fB\-\-abort\fR
SIGABRT sent to all processes.
.TP
\fB\-\-kill\fR
SIGKILL sent to all processes.
.TP
\fB\-\-cont\fR
SIGCONT sent to all processes.
.IP
Options in this group are mutually exclusive.
If more than one is given then only the last will be honored.
.SS "Options for file system synchronization (default is --sync):"
.TP
\fB\-\-sync\fR
fsync checkpoint file(s) to disk (default).
.TP
\fB\-\-nosync\fR
do not fsync checkpoint file(s) to disk.
.SS "Options to save optional portions of memory:"
.TP
\fB\-\-save\-exe\fR
save the executable file.
.TP
\fB\-\-save\-private\fR
save private mapped files.
(executables and libraries are mapped this way)
.TP
\fB\-\-save\-shared\fR
save shared mapped files.
(System V IPC is mapped this way).
.TP
\fB\-\-save\-all\fR
save all of the above.
.TP
\fB\-\-save\-none\fR
save none of the above (the default).
.SS "Options for ptraced processes (default is --ptraced-error):"
.TP
\fB\-\-ptraced\-error\fR
return an error if a checkpoint is requested
of a process being ptraced.
.TP
\fB\-\-ptraced\-skip\fR
ptraced processes are silently excluded from the
checkpoint request.  If the checkpoint scope is
\fB\-\-tree\fR, then this will also exclude any children
of such processes.  No error is produced unless
this results in zero processes checkpointed.
.TP
\fB\-\-ptraced\-allow\fR
checkpoint ptraced processes normally.
WARNING: This may require the tracer to "continue"
the target process(es), possibly more than once.
.SS "Options for processes ptracing others (default is --ptracer-error):"
.TP
\fB\-\-ptracer\-error\fR
return an error if a checkpoint is requested
of a process which is ptracing others.
.TP
\fB\-\-ptracer\-skip\fR
processes ptracing others are silently excluded
from the checkpoint request.  If the checkpoint
scope is \fB\-\-tree\fR, then this will also exclude any
children of such processes.  No error is produced
unless this results in zero processes checkpointed.
.SS "Options for kernel log messages (default is --kmsg-error):"
.TP
\fB\-\-kmsg\-none\fR
don't report any kernel messages.
.TP
\fB\-\-kmsg\-error\fR
on checkpoint failure, report on stderr any kernel
messages associated with the checkpoint request.
.TP
\fB\-\-kmsg\-warning\fR
report on stderr any kernel messages associated
with the checkpoint request, regardless of success
or failure.  Messages generated in the absence of
failure are considered to be warnings.
.IP
Options in this group are mutually exclusive.
If more than one is given then only the last will be honored.
Note that \fB\-\-quiet\fR suppresses all stderr output, including these messages.
.SS "Misc Options:"
.TP
\fB\-t\fR, \fB\-\-time\fR SEC
allow only SEC seconds for target to complete
checkpoint (default: wait indefinitely).
.SH EXAMPLES

To checkpoint the process with process ID 23452, saving its state to 
file 
.IR context.23452 :

.RS 
.B cr_checkpoint -p
.I 23452
.RE

To checkpoint all the processes in process group 68473, and save them to 
file 
.IR groupie :

.RS 
.B cr_checkpoint -g -f 
.I groupie 68473 
.RE

To checkpoint all the process in session 8362, and save separate 'context.PID'
files for each process in directory 'my_checkpoints':

.RS
.B cr_checkpoint -s -d 
.I my_checkpoints 8362
.RE
.SH BUGS

Some features in this manpage may be unimplemented.
.SH AUTHORS

Jason Duell, Paul Hargrove, and Eric Roman, Lawrence Berkeley National
Laboratory.
.SH "REPORTING BUGS"

Bug reports may be filed on the web at 
.BR http://mantis.lbl.gov/bugzilla .
.SH "SEE ALSO"

.BR cr_restart (1), 
.BR cr_run (1)
